{% include 'header' %}

import DZNEmptyDataSet
import UIKit

protocol {{ module_info.name }}VCTableControllerDelegate: class {
    
    func didSelectItem(_ item: {{ custom_parameters.dto }})
}

final class {{ module_info.name }}VCTableController: NSObject {
    
    weak var delegate: {{ module_info.name }}VCTableControllerDelegate?
    
    private var dataSource: [{{ module_info.name }}TableViewCellViewModel] = []
    
    func updateDataSource(_ newData: [{{ custom_parameters.dto }}]) {
        self.dataSource = newData.map{ return {{ module_info.name }}TableViewCellViewModel($0) }
    }

}

// MARK: - UITableViewDataSource
extension {{ custom_parameters.dto }}VCTableController: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return dataSource.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let identifier: String = {{ custom_parameters.dto }}TableViewCell.reuseIdentifier
        guard let cell = tableView.dequeueReusableCell(withIdentifier: identifier,
                                                       for: indexPath) as? {{ custom_parameters.dto }}TableViewCell else {
                                                        preconditionFailure("Unable to dequeueReusableCell")
        }
        cell.update(dataSource[indexPath.row])
        return cell
    }
    
}

// MARK: - UITableViewDelegate
extension {{ custom_parameters.dto }}VCTableController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {
        return CGFloat.leastNonzeroMagnitude
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        
        delegate?.didSelectItem(dataSource[indexPath.row].item)
    }
    
}

// MARK: - DZNEmptyDataSetSource
extension {{ custom_parameters.dto }}VCTableController: DZNEmptyDataSetSource {
    
    func title(forEmptyDataSet scrollView: UIScrollView!) -> NSAttributedString! {
        
        let text: String = "Empty state title"
        let attributes: [NSAttributedString.Key: Any] = [.foregroundColor: UIColor.black,
                                                         .font: UIFont.systemFont(ofSize: 20.0, weight: .bold)]
        let attributedString: NSAttributedString = NSAttributedString(string: text, attributes: attributes)
        return attributedString
    }
}

// MARK: - DZNEmptyDataSetDelegate
extension {{ custom_parameters.dto }}VCTableController: DZNEmptyDataSetDelegate {
    
    func emptyDataSetShouldBeForced(toDisplay scrollView: UIScrollView!) -> Bool {
        return dataSource.isEmpty
    }
    
    func emptyDataSetShouldAllowScroll(_ scrollView: UIScrollView!) -> Bool {
        return true
    }
}
